import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'org.springframework.boot' version '2.6.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'org.openapi.generator' version '5.2.1'
}

group = 'ru.ssv'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'io.springfox:springfox-swagger2:3.0.0'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.assertj:assertj-core:3.22.0'
    testImplementation 'io.rest-assured:rest-assured:5.0.1'
    testImplementation 'io.rest-assured:json-path:5.0.1'
    testImplementation 'io.rest-assured:xml-path:5.0.1'
}

tasks.named('test') {
    useJUnitPlatform()
}

openApiGenerate {
    generatorName = "spring"
    inputSpec = "$projectDir/src/main/resources/openapi/openapi.yaml"
    outputDir = "$projectDir"
    apiPackage = "ru.ssv.delphin.api"
    modelPackage = "ru.ssv.delphin.api.model"
    configOptions = [
            interfaceOnly: "true",
            openApiNullable: "false",
            skipDefaultInterface: "true"
    ]
    globalProperties = [
            apis: "",
            models: ""
    ]
}

compileJava.dependsOn tasks.openApiGenerate
processResources.dependsOn tasks.openApiGenerate
