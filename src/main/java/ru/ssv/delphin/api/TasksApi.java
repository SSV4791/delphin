/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.ssv.delphin.api;

import ru.ssv.delphin.api.model.TaskResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-05-06T14:15:57.242208+03:00[Europe/Moscow]")
@Validated
@Api(value = "tasks", description = "the tasks API")
public interface TasksApi {

    /**
     * GET /tasks/{taskId}
     * Получение задачи по id
     *
     * @param taskId Идентификатор задачи (required)
     * @return Успешный ответ (status code 200)
     *         or Not Found (status code 404)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "", nickname = "getTaskById", notes = "Получение задачи по id", response = TaskResponse.class, tags={ "Task", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Успешный ответ", response = TaskResponse.class),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tasks/{taskId}",
        produces = { "application/json" }
    )
    ResponseEntity<TaskResponse> getTaskById(@ApiParam(value = "Идентификатор задачи",required=true) @PathVariable("taskId") String taskId);

}
